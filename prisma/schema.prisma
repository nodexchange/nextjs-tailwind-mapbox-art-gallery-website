// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @default(cuid()) @id
  name          String?
  surname       String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  telephone     String?
  eName         String?
  password      String?
  eContact      String?
  admin         Boolean   @default(false)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  accounts      Account[]
  sessions      Session[]
  dance_classes DanceClass[]
  transactions  Transaction[]

  @@map(name: "users")
}


model DanceClass {
  id                 String  @default(cuid()) @id
  type               String
  date               DateTime
  location           String @default("Guildhall")
  time               DateTime
  users              User[]

  @@map("dance_classes")
}

model Transaction {
  id                 String
  type               String
  createdAt          DateTime @default(now()) @map(name: "created_at")
  userId             String  @map("user_id")
  user User @relation(fields: [userId], references: [id])
  @@map("transaction")
  @@unique([id])
}

model Account {
  id                 String  @default(cuid()) @id
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

